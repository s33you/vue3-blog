[{"title":"React","date":"2021/5/29","content":"<h2 style='text-align:center'>React</h2>\n<span style='text-align:center;color:grey;'>日期：</span><span style='text-align:center;color:grey;'>2021/5/29</span>\t\n<span style='text-align:center;color:grey;'>作者：</span><span style='text-align:center;color:grey;'>timebean</span>\n<h2>进阶知识</h2>\n<h3>Context</h3>\n<p>类似于vue provider/inject 的机制</p>\n<p>当父组件的一个属性需要层层传递到很深的层级时，使用</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-comment\">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-comment\">// 为当前的 theme 创建一个 context（“light”为默认值）。</span></li><li><span class=\"line-num\" data-line=\"3\"></span><span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext(<span class=\"hljs-string\">&#x27;light&#x27;</span>);</li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"5\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-comment\">// 使用一个 Provider 来将当前的 theme 传递给以下的组件树。</span></li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-comment\">// 无论多深，任何组件都能读取这个值。</span></li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-comment\">// 在这个例子中，我们将 “dark” 作为当前的值传递下去。</span></li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"10\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;dark&quot;</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toolbar</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"12\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"13\"></span>    );</li><li><span class=\"line-num\" data-line=\"14\"></span>  }</li><li><span class=\"line-num\" data-line=\"15\"></span>}</li><li><span class=\"line-num\" data-line=\"16\"></span></li><li><span class=\"line-num\" data-line=\"17\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Toolbar</span>(<span class=\"hljs-params\"></span>) </span>{</li><li><span class=\"line-num\" data-line=\"18\"></span>  <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"19\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"20\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemedButton</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"21\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"22\"></span>  );</li><li><span class=\"line-num\" data-line=\"23\"></span>}</li><li><span class=\"line-num\" data-line=\"24\"></span></li><li><span class=\"line-num\" data-line=\"25\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThemedButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"26\"></span>  <span class=\"hljs-comment\">// 指定 contextType 读取当前的 theme context。</span></li><li><span class=\"line-num\" data-line=\"27\"></span>  <span class=\"hljs-comment\">// React 会往上找到最近的 theme Provider，然后使用它的值。</span></li><li><span class=\"line-num\" data-line=\"28\"></span>  <span class=\"hljs-comment\">// 在这个例子中，当前的 theme 值为 “dark”。</span></li><li><span class=\"line-num\" data-line=\"29\"></span>  </li><li><span class=\"line-num\" data-line=\"30\"></span>  <span class=\"hljs-comment\">//相当于inject 消费父级组件传递的context</span></li><li><span class=\"line-num\" data-line=\"31\"></span>  <span class=\"hljs-keyword\">static</span> contextType = ThemeContext;</li><li><span class=\"line-num\" data-line=\"32\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"33\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">theme</span>=<span class=\"hljs-string\">{this.context}</span> /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"34\"></span>    <span class=\"hljs-comment\">//自动解包，相当于获取context.value </span></li><li><span class=\"line-num\" data-line=\"35\"></span>  }</li><li><span class=\"line-num\" data-line=\"36\"></span>}</li></ol></code></pre>\n<p><strong>反转控制的哲学</strong></p>\n<p>有这样一个组件</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span>&lt;Page user={user} avatarSize={avatarSize} /&gt;</li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"3\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PageLayout</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> <span class=\"hljs-attr\">avatarSize</span>=<span class=\"hljs-string\">{avatarSize}</span> /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"5\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationBar</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> <span class=\"hljs-attr\">avatarSize</span>=<span class=\"hljs-string\">{avatarSize}</span> /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"7\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{user.permalink}</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">{avatarSize}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"10\"></span></li></ol></code></pre>\n<p>可以看到，真正消费user 和 avatarSize 属性的组件只有<Link>组件，但它却位于很深的层级.  Context的应用场景更适合于这一层一层的组件依赖于同一个属性，显然这里不太适合.<br>\n但这种组织方式无疑是糟糕的，一旦Link组件需要一些新的属性，每一层级都要为其传递这一新属性，非常难受</p>\n<p>于是我们使用一种反转控制的设计理念，将Link组件本身传递下去，供需要使用它的组件去消费它。</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Page</span>(<span class=\"hljs-params\">props</span>) </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-keyword\">const</span> user = props.user;</li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-keyword\">const</span> userLink = (</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{user.permalink}</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Avatar</span> <span class=\"hljs-attr\">user</span>=<span class=\"hljs-string\">{user}</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">{props.avatarSize}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"7\"></span>  );</li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PageLayout</span> <span class=\"hljs-attr\">userLink</span>=<span class=\"hljs-string\">{userLink}</span> /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"9\"></span>}</li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-comment\">// 现在，我们有这样的组件：</span></li><li><span class=\"line-num\" data-line=\"12\"></span>&lt;Page user={user} avatarSize={avatarSize} /&gt;</li><li><span class=\"line-num\" data-line=\"13\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"14\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PageLayout</span> <span class=\"hljs-attr\">userLink</span>=<span class=\"hljs-string\">{...}</span> /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"15\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"16\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationBar</span> <span class=\"hljs-attr\">userLink</span>=<span class=\"hljs-string\">{...}</span> /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"17\"></span><span class=\"hljs-comment\">// ... 渲染出 ...</span></li><li><span class=\"line-num\" data-line=\"18\"></span>{props.userLink}</li><li><span class=\"line-num\" data-line=\"19\"></span></li></ol></code></pre>\n<p><strong>动态context</strong></p>\n<p>显然Context的用处不止如此</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">const</span> themes = {</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-attr\">light</span>: {</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-attr\">foreground</span>: <span class=\"hljs-string\">&#x27;#000000&#x27;</span>,</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-attr\">background</span>: <span class=\"hljs-string\">&#x27;#eeeeee&#x27;</span>,</li><li><span class=\"line-num\" data-line=\"5\"></span>  },</li><li><span class=\"line-num\" data-line=\"6\"></span>  <span class=\"hljs-attr\">dark</span>: {</li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"hljs-attr\">foreground</span>: <span class=\"hljs-string\">&#x27;#ffffff&#x27;</span>,</li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-attr\">background</span>: <span class=\"hljs-string\">&#x27;#222222&#x27;</span>,</li><li><span class=\"line-num\" data-line=\"9\"></span>  },</li><li><span class=\"line-num\" data-line=\"10\"></span>};</li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext(</li><li><span class=\"line-num\" data-line=\"12\"></span>  themes.dark <span class=\"hljs-comment\">// 默认值</span></li><li><span class=\"line-num\" data-line=\"13\"></span>);</li><li><span class=\"line-num\" data-line=\"14\"></span><span class=\"hljs-comment\">//基本属性</span></li><li><span class=\"line-num\" data-line=\"15\"></span></li><li><span class=\"line-num\" data-line=\"16\"></span><span class=\"hljs-comment\">//Theme Button 消费 ThemeContext</span></li><li><span class=\"line-num\" data-line=\"17\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ThemedButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"18\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"19\"></span>    <span class=\"hljs-keyword\">let</span> props = <span class=\"hljs-built_in\">this</span>.props;</li><li><span class=\"line-num\" data-line=\"20\"></span>    <span class=\"hljs-keyword\">let</span> theme = <span class=\"hljs-built_in\">this</span>.context;</li><li><span class=\"line-num\" data-line=\"21\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"22\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span></li><li><span class=\"line-num\" data-line=\"23\"></span>        {<span class=\"hljs-attr\">...props</span>}</li><li><span class=\"line-num\" data-line=\"24\"></span>        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{backgroundColor:</span> <span class=\"hljs-attr\">theme.background</span>}}</li><li><span class=\"line-num\" data-line=\"25\"></span>      /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"26\"></span>    );</li><li><span class=\"line-num\" data-line=\"27\"></span>  }</li><li><span class=\"line-num\" data-line=\"28\"></span>}</li><li><span class=\"line-num\" data-line=\"29\"></span>ThemedButton.contextType = ThemeContext;</li><li><span class=\"line-num\" data-line=\"30\"></span></li><li><span class=\"line-num\" data-line=\"31\"></span><span class=\"hljs-comment\">//写一个函数组件使ThemeButton处于更深的层级，更好的还原应用场景</span></li><li><span class=\"line-num\" data-line=\"32\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Toolbar</span>(<span class=\"hljs-params\">props</span>) </span>{</li><li><span class=\"line-num\" data-line=\"33\"></span>  <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"34\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemedButton</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{props.changeTheme}</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"35\"></span>      Change Theme</li><li><span class=\"line-num\" data-line=\"36\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemedButton</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"37\"></span>  );</li><li><span class=\"line-num\" data-line=\"38\"></span>}</li><li><span class=\"line-num\" data-line=\"39\"></span></li><li><span class=\"line-num\" data-line=\"40\"></span><span class=\"hljs-comment\">// 通过App 组件 去控制Context 的值</span></li><li><span class=\"line-num\" data-line=\"41\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"42\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"43\"></span>    <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"44\"></span>    <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"45\"></span>      <span class=\"hljs-attr\">theme</span>: themes.light,</li><li><span class=\"line-num\" data-line=\"46\"></span>    };</li><li><span class=\"line-num\" data-line=\"47\"></span></li><li><span class=\"line-num\" data-line=\"48\"></span>    <span class=\"hljs-built_in\">this</span>.toggleTheme = <span class=\"hljs-function\">() =&gt;</span> {</li><li><span class=\"line-num\" data-line=\"49\"></span>      <span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({</li><li><span class=\"line-num\" data-line=\"50\"></span>        <span class=\"hljs-attr\">theme</span>:</li><li><span class=\"line-num\" data-line=\"51\"></span>          state.theme === themes.dark</li><li><span class=\"line-num\" data-line=\"52\"></span>            ? themes.light</li><li><span class=\"line-num\" data-line=\"53\"></span>            : themes.dark,</li><li><span class=\"line-num\" data-line=\"54\"></span>      }));</li><li><span class=\"line-num\" data-line=\"55\"></span>    };</li><li><span class=\"line-num\" data-line=\"56\"></span>  }</li><li><span class=\"line-num\" data-line=\"57\"></span></li><li><span class=\"line-num\" data-line=\"58\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"59\"></span>    <span class=\"hljs-comment\">// 在 ThemeProvider 内部的 ThemedButton 按钮组件使用 state 中的 theme 值，</span></li><li><span class=\"line-num\" data-line=\"60\"></span>    <span class=\"hljs-comment\">// 而外部的组件使用默认的 theme 值</span></li><li><span class=\"line-num\" data-line=\"61\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"62\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"63\"></span>      //让Context.Provider 的 value 与 state 关联， 从而通过state 去控制 context 的值</li><li><span class=\"line-num\" data-line=\"64\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state.theme}</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"65\"></span>        //注意这里的Context 控制函数是通过props层层传递，对，又遇到了同样的问题</li><li><span class=\"line-num\" data-line=\"66\"></span>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Toolbar</span> <span class=\"hljs-attr\">changeTheme</span>=<span class=\"hljs-string\">{this.toggleTheme}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"67\"></span>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"68\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Section</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"69\"></span>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemedButton</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"70\"></span>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Section</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"71\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"72\"></span>    );</li><li><span class=\"line-num\" data-line=\"73\"></span>  }</li><li><span class=\"line-num\" data-line=\"74\"></span>}</li><li><span class=\"line-num\" data-line=\"75\"></span></li><li><span class=\"line-num\" data-line=\"76\"></span>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.root);</li></ol></code></pre>\n<p><strong>在嵌套组件中更新 Context</strong></p>\n<p>上述例子中，控制Context 的函数时通过props传递的，React提供了一种更精确的方式来控制和消费Context</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">const</span> themeContext = React.createContext({</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-attr\">theme</span>: themes.dark,</li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-attr\">toggleTheme</span>: <span class=\"hljs-function\">() =&gt;</span> {},</li><li><span class=\"line-num\" data-line=\"4\"></span>});</li><li><span class=\"line-num\" data-line=\"5\"></span></li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ThemeTogglerButton</span>(<span class=\"hljs-params\"></span>) </span>{</li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-comment\">// Theme Toggler 按钮不仅仅只获取 theme 值，它也从 context 中获取到一个 toggleTheme 函数</span></li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Consumer</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>      {({theme, toggleTheme}) =&gt; (</li><li><span class=\"line-num\" data-line=\"11\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>          <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{toggleTheme}</span></li><li><span class=\"line-num\" data-line=\"12\"></span>          <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">{{backgroundColor:</span> <span class=\"hljs-attr\">theme.background</span>}}&gt;</span></li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span>          Toggle Theme</li><li><span class=\"line-num\" data-line=\"15\"></span>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"16\"></span>      )}</li><li><span class=\"line-num\" data-line=\"17\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Consumer</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"18\"></span>  );</li><li><span class=\"line-num\" data-line=\"19\"></span>}</li><li><span class=\"line-num\" data-line=\"20\"></span></li><li><span class=\"line-num\" data-line=\"21\"></span><span class=\"hljs-comment\">//这里是一个函数式组件</span></li><li><span class=\"line-num\" data-line=\"22\"></span></li><li><span class=\"line-num\" data-line=\"23\"></span></li><li><span class=\"line-num\" data-line=\"24\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"25\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"26\"></span>    <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"27\"></span></li><li><span class=\"line-num\" data-line=\"28\"></span>    <span class=\"hljs-built_in\">this</span>.toggleTheme = <span class=\"hljs-function\">() =&gt;</span> {</li><li><span class=\"line-num\" data-line=\"29\"></span>      <span class=\"hljs-built_in\">this</span>.setState(<span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =&gt;</span> ({</li><li><span class=\"line-num\" data-line=\"30\"></span>        <span class=\"hljs-attr\">theme</span>:</li><li><span class=\"line-num\" data-line=\"31\"></span>          state.theme === themes.dark</li><li><span class=\"line-num\" data-line=\"32\"></span>            ? themes.light</li><li><span class=\"line-num\" data-line=\"33\"></span>            : themes.dark,</li><li><span class=\"line-num\" data-line=\"34\"></span>      }));</li><li><span class=\"line-num\" data-line=\"35\"></span>    };</li><li><span class=\"line-num\" data-line=\"36\"></span></li><li><span class=\"line-num\" data-line=\"37\"></span>    <span class=\"hljs-comment\">// State 也包含了更新函数，因此它会被传递进 context provider。</span></li><li><span class=\"line-num\" data-line=\"38\"></span>    <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"39\"></span>      <span class=\"hljs-attr\">theme</span>: themes.light,</li><li><span class=\"line-num\" data-line=\"40\"></span>      <span class=\"hljs-attr\">toggleTheme</span>: <span class=\"hljs-built_in\">this</span>.toggleTheme,</li><li><span class=\"line-num\" data-line=\"41\"></span>    };</li><li><span class=\"line-num\" data-line=\"42\"></span>  }</li><li><span class=\"line-num\" data-line=\"43\"></span></li><li><span class=\"line-num\" data-line=\"44\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"45\"></span>    <span class=\"hljs-comment\">// 整个 state 都被传递进 provider</span></li><li><span class=\"line-num\" data-line=\"46\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"47\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{this.state}</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"48\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Content</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"49\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"50\"></span>    );</li><li><span class=\"line-num\" data-line=\"51\"></span>  }</li><li><span class=\"line-num\" data-line=\"52\"></span>}</li><li><span class=\"line-num\" data-line=\"53\"></span></li><li><span class=\"line-num\" data-line=\"54\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Content</span>(<span class=\"hljs-params\"></span>) </span>{</li><li><span class=\"line-num\" data-line=\"55\"></span>  <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"56\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"57\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeTogglerButton</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"58\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"59\"></span>  );</li><li><span class=\"line-num\" data-line=\"60\"></span>}</li><li><span class=\"line-num\" data-line=\"61\"></span></li><li><span class=\"line-num\" data-line=\"62\"></span>ReactDOM.render(<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.root);</li><li><span class=\"line-num\" data-line=\"63\"></span></li></ol></code></pre>\n<p><code>Context</code>的<code>Provider</code> 和<code>Consumer</code> 就相当于 <code>vue</code> 的 <code>provider/inject</code></p>\n<p>并且可以通过多个Provider 和多个Consumer 实现多消费</p>\n<h3>错误边界（Error Boundaries）</h3>\n<p>如果一个 class 组件中定义了 <code>static getDerivedStateFromError()</code> 或 <code>componentDidCatch()  </code></p>\n<p>这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，请使用 <code>static getDerivedStateFromError()</code> 渲染备用 UI ，使用 <code>componentDidCatch() </code>打印错误信息。</p>\n<p><code>eg.</code></p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ErrorBoundary</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-built_in\">this</span>.state = { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">false</span> };</li><li><span class=\"line-num\" data-line=\"5\"></span>  }</li><li><span class=\"line-num\" data-line=\"6\"></span></li><li><span class=\"line-num\" data-line=\"7\"></span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getDerivedStateFromError</span>(<span class=\"hljs-params\">error</span>)</span> {</li><li><span class=\"line-num\" data-line=\"8\"></span>    <span class=\"hljs-comment\">// 更新 state 使下一次渲染能够显示降级后的 UI</span></li><li><span class=\"line-num\" data-line=\"9\"></span>    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">true</span> };</li><li><span class=\"line-num\" data-line=\"10\"></span>  }</li><li><span class=\"line-num\" data-line=\"11\"></span></li><li><span class=\"line-num\" data-line=\"12\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidCatch</span>(<span class=\"hljs-params\">error, errorInfo</span>)</span> {</li><li><span class=\"line-num\" data-line=\"13\"></span>    <span class=\"hljs-comment\">// 你同样可以将错误日志上报给服务器</span></li><li><span class=\"line-num\" data-line=\"14\"></span>    logErrorToMyService(error, errorInfo);</li><li><span class=\"line-num\" data-line=\"15\"></span>  }</li><li><span class=\"line-num\" data-line=\"16\"></span></li><li><span class=\"line-num\" data-line=\"17\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"18\"></span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.state.hasError) {</li><li><span class=\"line-num\" data-line=\"19\"></span>      <span class=\"hljs-comment\">// 你可以自定义降级后的 UI 并渲染</span></li><li><span class=\"line-num\" data-line=\"20\"></span>      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Something went wrong.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"21\"></span>    }</li><li><span class=\"line-num\" data-line=\"22\"></span></li><li><span class=\"line-num\" data-line=\"23\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.props.children; </li><li><span class=\"line-num\" data-line=\"24\"></span>  }</li><li><span class=\"line-num\" data-line=\"25\"></span>}</li></ol></code></pre>\n<p>错误边界是一种 React 组件，这种组件可以捕获并打印发生在其<strong>子组件树</strong>任何位置的<strong>JavaScript</strong> 错误，并且，它会渲染出<strong>备用 UI</strong>，而不是渲染那些崩溃了的子组件树。错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误。</p>\n<h3>Refs转发</h3>\n<p>先上例子</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-comment\">//一个input 通过 React.forwardRef()接受从上层传入的ref 变量</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-comment\">//并将具体的元素或者组件付给这个变量供其引用</span></li><li><span class=\"line-num\" data-line=\"3\"></span></li><li><span class=\"line-num\" data-line=\"4\"></span></li><li><span class=\"line-num\" data-line=\"5\"></span><span class=\"hljs-keyword\">const</span> Myinput = React.forwardRef(<span class=\"hljs-function\">(<span class=\"hljs-params\">props, ref</span>) =&gt;</span> {</li><li><span class=\"line-num\" data-line=\"6\"></span>  <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"7\"></span>    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Fragment</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"8\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">htmlFor</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span>名字:{props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"9\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{props.onChange}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"10\"></span>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{props.name}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"11\"></span>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Fragment</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"12\"></span>  );</li><li><span class=\"line-num\" data-line=\"13\"></span>});</li><li><span class=\"line-num\" data-line=\"14\"></span>    </li><li><span class=\"line-num\" data-line=\"15\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">App</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"16\"></span>  inputRef = React.createRef();</li><li><span class=\"line-num\" data-line=\"17\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"18\"></span>    <span class=\"hljs-built_in\">super</span>(props)</li><li><span class=\"line-num\" data-line=\"19\"></span>    <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"20\"></span>      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;jack&quot;</span>,</li><li><span class=\"line-num\" data-line=\"21\"></span>    };</li><li><span class=\"line-num\" data-line=\"22\"></span>  }</li><li><span class=\"line-num\" data-line=\"23\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toggleClick</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"24\"></span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inputRef);</li><li><span class=\"line-num\" data-line=\"25\"></span>    <span class=\"hljs-built_in\">this</span>.inputRef.current.focus();</li><li><span class=\"line-num\" data-line=\"26\"></span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inputRef.current.value);</li><li><span class=\"line-num\" data-line=\"27\"></span>  }</li><li><span class=\"line-num\" data-line=\"28\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toggleChange</span>(<span class=\"hljs-params\">e</span>)</span> {</li><li><span class=\"line-num\" data-line=\"29\"></span>    <span class=\"hljs-built_in\">this</span>.setState({</li><li><span class=\"line-num\" data-line=\"30\"></span>      <span class=\"hljs-attr\">name</span>: e.target.value,</li><li><span class=\"line-num\" data-line=\"31\"></span>    });</li><li><span class=\"line-num\" data-line=\"32\"></span>  }</li><li><span class=\"line-num\" data-line=\"33\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"34\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"35\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"36\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span>=&gt;</span>this.toggleClick()}&gt;测试<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"37\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Myinput</span></li><li><span class=\"line-num\" data-line=\"38\"></span>          <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">{this.state.name}</span></li><li><span class=\"line-num\" data-line=\"39\"></span>          <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{this.inputRef}</span></li><li><span class=\"line-num\" data-line=\"40\"></span>          <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{(e)</span>=&gt;</span>this.toggleChange(e)}</li><li><span class=\"line-num\" data-line=\"41\"></span>        /&gt;</li><li><span class=\"line-num\" data-line=\"42\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"43\"></span>    );</li><li><span class=\"line-num\" data-line=\"44\"></span>  }</li><li><span class=\"line-num\" data-line=\"45\"></span>}</li><li><span class=\"line-num\" data-line=\"46\"></span>ReactDOM.render(</li><li><span class=\"line-num\" data-line=\"47\"></span>  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">signedInUser</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">theme</span>=<span class=\"hljs-string\">&quot;dark&quot;</span> /&gt;</span></span>,</li><li><span class=\"line-num\" data-line=\"48\"></span>  <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">&quot;#timer&quot;</span>)</li><li><span class=\"line-num\" data-line=\"49\"></span>);</li></ol></code></pre>\n<p>没什么好讲的，不能直接穿透，尽量使用React.forwardRef 去明确附加在什么元素上</p>\n<p>通常是在高阶组件中需要注意：refs 将不会透传下去。这是因为 ref 不是 prop 属性。就像 key 一样，其被 React 进行了特殊处理。如果你对 HOC 添加 ref，该 ref 将引用最外层的容器组件，而不是被包裹的组件。</p>\n<h3>Fragemants</h3>\n<p>类似 template<br>\n短语法：&lt;&gt;&lt;/&gt;<br>\n可以带key</p>\n<h3>高阶组件(HOC) High Order Component</h3>\n<p>一种设计理念，具体实现来说，高阶组件是参数为组件，返回值为新组件的函数。</p>\n<p>oldComponent -&gt; HOC -&gt; newComponent</p>\n<blockquote>\n<h3>注意</h3>\n<p>我们之前建议使用 mixins 用于解决横切关注点相关的问题。但我们已经意识到 mixins 会产生更多麻烦。阅读更多 以了解我们为什么要抛弃 mixins 以及如何转换现有组件。</p>\n</blockquote>\n<p>也就是说HOC的解决目标在于，代码逻辑的复用。</p>\n<p>来看一个例子，首先有这样两个组件</p>\n<p>评论列表组件，依赖于一个数据源，当数据源发生变更，更新state</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CommentList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-built_in\">this</span>.handleChange = <span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-comment\">// 假设 &quot;DataSource&quot; 是个全局范围内的数据源变量</span></li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-attr\">comments</span>: DataSource.getComments()</li><li><span class=\"line-num\" data-line=\"8\"></span>    };</li><li><span class=\"line-num\" data-line=\"9\"></span>  }</li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"12\"></span>    <span class=\"hljs-comment\">// 订阅更改</span></li><li><span class=\"line-num\" data-line=\"13\"></span>    DataSource.addChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"14\"></span>  }</li><li><span class=\"line-num\" data-line=\"15\"></span></li><li><span class=\"line-num\" data-line=\"16\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"17\"></span>    <span class=\"hljs-comment\">// 清除订阅</span></li><li><span class=\"line-num\" data-line=\"18\"></span>    DataSource.removeChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"19\"></span>  }</li><li><span class=\"line-num\" data-line=\"20\"></span></li><li><span class=\"line-num\" data-line=\"21\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"22\"></span>    <span class=\"hljs-comment\">// 当数据源更新时，更新组件状态</span></li><li><span class=\"line-num\" data-line=\"23\"></span>    <span class=\"hljs-built_in\">this</span>.setState({</li><li><span class=\"line-num\" data-line=\"24\"></span>      <span class=\"hljs-attr\">comments</span>: DataSource.getComments()</li><li><span class=\"line-num\" data-line=\"25\"></span>    });</li><li><span class=\"line-num\" data-line=\"26\"></span>  }</li><li><span class=\"line-num\" data-line=\"27\"></span></li><li><span class=\"line-num\" data-line=\"28\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"29\"></span>    <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"30\"></span>      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"31\"></span>        {this.state.comments.map((comment) =&gt; (</li><li><span class=\"line-num\" data-line=\"32\"></span>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Comment</span> <span class=\"hljs-attr\">comment</span>=<span class=\"hljs-string\">{comment}</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{comment.id}</span> /&gt;</span></li><li><span class=\"line-num\" data-line=\"33\"></span>        ))}</li><li><span class=\"line-num\" data-line=\"34\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"35\"></span>    );</li><li><span class=\"line-num\" data-line=\"36\"></span>  }</li><li><span class=\"line-num\" data-line=\"37\"></span>}</li></ol></code></pre>\n<p>博客组件，依赖于一个数据源，当博客数据源，发生变更，更新blogPost数据</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BlogPost</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-built_in\">this</span>.handleChange = <span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</li><li><span class=\"line-num\" data-line=\"5\"></span>    <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-attr\">blogPost</span>: DataSource.getBlogPost(props.id)</li><li><span class=\"line-num\" data-line=\"7\"></span>    };</li><li><span class=\"line-num\" data-line=\"8\"></span>  }</li><li><span class=\"line-num\" data-line=\"9\"></span></li><li><span class=\"line-num\" data-line=\"10\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"11\"></span>    DataSource.addChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"12\"></span>  }</li><li><span class=\"line-num\" data-line=\"13\"></span></li><li><span class=\"line-num\" data-line=\"14\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"15\"></span>    DataSource.removeChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"16\"></span>  }</li><li><span class=\"line-num\" data-line=\"17\"></span></li><li><span class=\"line-num\" data-line=\"18\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"19\"></span>    <span class=\"hljs-built_in\">this</span>.setState({</li><li><span class=\"line-num\" data-line=\"20\"></span>      <span class=\"hljs-attr\">blogPost</span>: DataSource.getBlogPost(<span class=\"hljs-built_in\">this</span>.props.id)</li><li><span class=\"line-num\" data-line=\"21\"></span>    });</li><li><span class=\"line-num\" data-line=\"22\"></span>  }</li><li><span class=\"line-num\" data-line=\"23\"></span></li><li><span class=\"line-num\" data-line=\"24\"></span>  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"25\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">text</span>=<span class=\"hljs-string\">{this.state.blogPost}</span> /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"26\"></span>  }</li><li><span class=\"line-num\" data-line=\"27\"></span>}</li></ol></code></pre>\n<p>这两个组件的行为模式是如此的相近，但我们却写了这么多重复代码。</p>\n<p>我们提取一下这两个组件的公有逻辑</p>\n<ul>\n<li>挂载时，向DataSource 添加一个监听器</li>\n<li>当DataSource发生改变调用setState改变状态</li>\n<li>在卸载时，删除侦听器</li>\n</ul>\n<p>对于订阅了 DataSource 的组件，比如<code>CommentList</code>和 <code>BlogPost</code>，我们可以编写一个创建组件函数。该函数将接受一个子组件作为它的其中一个参数，该子组件将订阅数据作为<code> prop</code>。让我们调用函数 <code>withSubscription</code>：</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">const</span> CommentListWithSubscription = withSubscription(</li><li><span class=\"line-num\" data-line=\"2\"></span>  CommentList,</li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-function\">(<span class=\"hljs-params\">DataSource</span>) =&gt;</span> DataSource.getComments()</li><li><span class=\"line-num\" data-line=\"4\"></span>);</li><li><span class=\"line-num\" data-line=\"5\"></span></li><li><span class=\"line-num\" data-line=\"6\"></span><span class=\"hljs-keyword\">const</span> BlogPostWithSubscription = withSubscription(</li><li><span class=\"line-num\" data-line=\"7\"></span>  BlogPost,</li><li><span class=\"line-num\" data-line=\"8\"></span>  <span class=\"hljs-function\">(<span class=\"hljs-params\">DataSource, props</span>) =&gt;</span> DataSource.getBlogPost(props.id)</li><li><span class=\"line-num\" data-line=\"9\"></span>);</li></ol></code></pre>\n<p>第一个参数是被包装组件。第二参数是一个callback函数，通过这个回调函数，我们可以结合被返回的新组件的属性，拿到我们想要的数据，接下来可以欣赏这种设计的精妙之处</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">withSubscription</span>(<span class=\"hljs-params\">WrappedComponent, selectData</span>) </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-comment\">// ...并返回另一个组件...</span></li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span> {</li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-built_in\">super</span>(props);</li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-built_in\">this</span>.handleChange = <span class=\"hljs-built_in\">this</span>.handleChange.bind(<span class=\"hljs-built_in\">this</span>);</li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"8\"></span>      <span class=\"hljs-comment\">//绝佳设计，通过传递一个函数，使其能访问到新的组件的props!</span></li><li><span class=\"line-num\" data-line=\"9\"></span>        <span class=\"hljs-attr\">data</span>: selectData(DataSource, props)</li><li><span class=\"line-num\" data-line=\"10\"></span>      };</li><li><span class=\"line-num\" data-line=\"11\"></span>    }</li><li><span class=\"line-num\" data-line=\"12\"></span></li><li><span class=\"line-num\" data-line=\"13\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"14\"></span>      <span class=\"hljs-comment\">// ...负责订阅相关的操作...</span></li><li><span class=\"line-num\" data-line=\"15\"></span>      DataSource.addChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"16\"></span>    }</li><li><span class=\"line-num\" data-line=\"17\"></span></li><li><span class=\"line-num\" data-line=\"18\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">componentWillUnmount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"19\"></span>      DataSource.removeChangeListener(<span class=\"hljs-built_in\">this</span>.handleChange);</li><li><span class=\"line-num\" data-line=\"20\"></span>    }</li><li><span class=\"line-num\" data-line=\"21\"></span></li><li><span class=\"line-num\" data-line=\"22\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">handleChange</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"23\"></span>      <span class=\"hljs-built_in\">this</span>.setState({</li><li><span class=\"line-num\" data-line=\"24\"></span>       <span class=\"hljs-comment\">//绝佳设计，通过传递一个函数，使其能访问到新的组件的props!</span></li><li><span class=\"line-num\" data-line=\"25\"></span>        <span class=\"hljs-attr\">data</span>: selectData(DataSource, <span class=\"hljs-built_in\">this</span>.props)</li><li><span class=\"line-num\" data-line=\"26\"></span>      });</li><li><span class=\"line-num\" data-line=\"27\"></span>    }</li><li><span class=\"line-num\" data-line=\"28\"></span></li><li><span class=\"line-num\" data-line=\"29\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"30\"></span>      <span class=\"hljs-comment\">// ... 并使用新数据渲染被包装的组件!</span></li><li><span class=\"line-num\" data-line=\"31\"></span>      <span class=\"hljs-comment\">// 请注意，我们可能还会传递其他属性</span></li><li><span class=\"line-num\" data-line=\"32\"></span>      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{this.state.data}</span> {<span class=\"hljs-attr\">...this.props</span>} /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"33\"></span>    }</li><li><span class=\"line-num\" data-line=\"34\"></span>  };</li><li><span class=\"line-num\" data-line=\"35\"></span>}</li></ol></code></pre>\n<h4>总结：HOC主要是用于代码逻辑复用， 在HOC中，将传入组件所需要的props,方法等组装好，供传入组件消费</h4>\n<h4>深入，HOC的具体应用场景</h4>\n<h5>1.组合渲染</h5>\n<blockquote>\n<p>属性代理实现</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stylHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>) </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-keyword\">return</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>{this.props.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...this.props</span>} /&gt;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>);</li><li><span class=\"line-num\" data-line=\"8\"></span>    }</li><li><span class=\"line-num\" data-line=\"9\"></span>  }</li><li><span class=\"line-num\" data-line=\"10\"></span>}</li></ol></code></pre>\n<blockquote>\n<p>反向继承</p>\n</blockquote>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">stylHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>)</span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WrappedComponent</span></span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>        <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"4\"></span>            <span class=\"hljs-keyword\">return</span> (<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;title&quot;</span>&gt;</span>{this.props.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"6\"></span>                 {super.render()}</li><li><span class=\"line-num\" data-line=\"7\"></span>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></li><li><span class=\"line-num\" data-line=\"8\"></span>            )</li><li><span class=\"line-num\" data-line=\"9\"></span>        }</li><li><span class=\"line-num\" data-line=\"10\"></span>    }</li><li><span class=\"line-num\" data-line=\"11\"></span>}</li></ol></code></pre>\n<h5>2.条件渲染</h5>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-comment\">//通过属性代理实现</span></li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">visibleHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>) </span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"4\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"5\"></span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.props.visible === <span class=\"hljs-literal\">false</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;</li><li><span class=\"line-num\" data-line=\"6\"></span>      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"7\"></span>    }</li><li><span class=\"line-num\" data-line=\"8\"></span>  }</li><li><span class=\"line-num\" data-line=\"9\"></span>}</li><li><span class=\"line-num\" data-line=\"10\"></span></li><li><span class=\"line-num\" data-line=\"11\"></span><span class=\"hljs-comment\">//通过反向继承实现</span></li><li><span class=\"line-num\" data-line=\"12\"></span></li><li><span class=\"line-num\" data-line=\"13\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">visibleHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>) </span>{</li><li><span class=\"line-num\" data-line=\"14\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">WrappedComponent</span> </span>{</li><li><span class=\"line-num\" data-line=\"15\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"16\"></span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.props.visible === <span class=\"hljs-literal\">false</span>) {</li><li><span class=\"line-num\" data-line=\"17\"></span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span></li><li><span class=\"line-num\" data-line=\"18\"></span>      } <span class=\"hljs-keyword\">else</span> {</li><li><span class=\"line-num\" data-line=\"19\"></span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.render()</li><li><span class=\"line-num\" data-line=\"20\"></span>      }</li><li><span class=\"line-num\" data-line=\"21\"></span>    }</li><li><span class=\"line-num\" data-line=\"22\"></span>  }</li><li><span class=\"line-num\" data-line=\"23\"></span>}</li></ol></code></pre>\n<h5>3.对props进行加工</h5>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">proxyHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>) </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-keyword\">const</span> newProps = {</li><li><span class=\"line-num\" data-line=\"5\"></span>        ...this.props,</li><li><span class=\"line-num\" data-line=\"6\"></span>        <span class=\"hljs-attr\">user</span>: <span class=\"hljs-string\">&#x27;ConardLi&#x27;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>      }</li><li><span class=\"line-num\" data-line=\"8\"></span>      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...newProps</span>} /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"9\"></span>    }</li><li><span class=\"line-num\" data-line=\"10\"></span>  }</li><li><span class=\"line-num\" data-line=\"11\"></span>}</li></ol></code></pre>\n<h5>4.获取refs</h5>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">refHOC</span>(<span class=\"hljs-params\">WrappedComponent</span>) </span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Component</span> </span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">componentDidMount</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"4\"></span>      <span class=\"hljs-built_in\">this</span>.wapperRef.log()</li><li><span class=\"line-num\" data-line=\"5\"></span>    }</li><li><span class=\"line-num\" data-line=\"6\"></span>    <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span> {</li><li><span class=\"line-num\" data-line=\"7\"></span>      <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...this.props</span>} <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{ref</span> =&gt;</span> { this.wapperRef = ref }} /&gt;</span>;</li><li><span class=\"line-num\" data-line=\"8\"></span>    }</li><li><span class=\"line-num\" data-line=\"9\"></span>  }</li><li><span class=\"line-num\" data-line=\"10\"></span>}</li></ol></code></pre>\n<h5>5.状态管理</h5>\n<p>将原组件的状态提取到<code>HOC</code>中进行管理，如下面的代码，我们将<code>Input</code>的<code>value</code>提取到<code>HOC</code>中进行管理，使它变成受控组件，同时不影响它使用<code>onChange</code>方法进行一些其他操作。基于这种方式，我们可以实现一个简单的双向绑定，具体请看双向绑定。</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">proxyHoc</span>(<span class=\"hljs-params\">WrappedComponent</span>)</span>{</li><li><span class=\"line-num\" data-line=\"2\"></span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">React</span>.<span class=\"hljs-title\">Component</span></span>{</li><li><span class=\"line-num\" data-line=\"3\"></span>      <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">props</span>)</span>{</li><li><span class=\"line-num\" data-line=\"4\"></span>        <span class=\"hljs-built_in\">super</span>(props)</li><li><span class=\"line-num\" data-line=\"5\"></span>        <span class=\"hljs-built_in\">this</span>.state = {</li><li><span class=\"line-num\" data-line=\"6\"></span>          <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&quot;&quot;</span></li><li><span class=\"line-num\" data-line=\"7\"></span>        }</li><li><span class=\"line-num\" data-line=\"8\"></span>      }</li><li><span class=\"line-num\" data-line=\"9\"></span>      onChange = <span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>)=&gt;</span>{</li><li><span class=\"line-num\" data-line=\"10\"></span>        <span class=\"hljs-comment\">//提取原有onChange操作</span></li><li><span class=\"line-num\" data-line=\"11\"></span>          <span class=\"hljs-keyword\">const</span> {onChange} = <span class=\"hljs-built_in\">this</span>.props</li><li><span class=\"line-num\" data-line=\"12\"></span>          <span class=\"hljs-built_in\">this</span>.setState({</li><li><span class=\"line-num\" data-line=\"13\"></span>            <span class=\"hljs-attr\">value</span>:event.target.value</li><li><span class=\"line-num\" data-line=\"14\"></span>          },<span class=\"hljs-function\">()=&gt;</span>{</li><li><span class=\"line-num\" data-line=\"15\"></span>            <span class=\"hljs-comment\">//状态更新后执行props中原有onChange操作</span></li><li><span class=\"line-num\" data-line=\"16\"></span>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> onChange === <span class=\"hljs-string\">&#x27;function&#x27;</span>){</li><li><span class=\"line-num\" data-line=\"17\"></span>              onChange(event)</li><li><span class=\"line-num\" data-line=\"18\"></span>            }</li><li><span class=\"line-num\" data-line=\"19\"></span>          })</li><li><span class=\"line-num\" data-line=\"20\"></span>      }</li><li><span class=\"line-num\" data-line=\"21\"></span>      <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\"></span>)</span>{</li><li><span class=\"line-num\" data-line=\"22\"></span>        <span class=\"hljs-keyword\">const</span> newProps  = {</li><li><span class=\"line-num\" data-line=\"23\"></span>          <span class=\"hljs-attr\">value</span>:<span class=\"hljs-built_in\">this</span>.state.value,</li><li><span class=\"line-num\" data-line=\"24\"></span>          <span class=\"hljs-attr\">onChange</span>:<span class=\"hljs-built_in\">this</span>.onChange</li><li><span class=\"line-num\" data-line=\"25\"></span>        }</li><li><span class=\"line-num\" data-line=\"26\"></span>        <span class=\"hljs-keyword\">return</span> (</li><li><span class=\"line-num\" data-line=\"27\"></span>          <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span></li><li><span class=\"line-num\" data-line=\"28\"></span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>{this.state.value}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></li><li><span class=\"line-num\" data-line=\"29\"></span>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WrappedComponent</span> {<span class=\"hljs-attr\">...this.props</span>} {<span class=\"hljs-attr\">...newProps</span>} /&gt;</span></li><li><span class=\"line-num\" data-line=\"30\"></span>          <span class=\"hljs-tag\">&lt;/&gt;</span></span></li><li><span class=\"line-num\" data-line=\"31\"></span>        );</li><li><span class=\"line-num\" data-line=\"32\"></span>        </li><li><span class=\"line-num\" data-line=\"33\"></span>      }</li><li><span class=\"line-num\" data-line=\"34\"></span>    }</li><li><span class=\"line-num\" data-line=\"35\"></span>}</li><li><span class=\"line-num\" data-line=\"36\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Hoc</span>(<span class=\"hljs-params\">props</span>)</span>{</li><li><span class=\"line-num\" data-line=\"37\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> {<span class=\"hljs-attr\">...props</span>}/&gt;</span></span></li><li><span class=\"line-num\" data-line=\"38\"></span>}</li><li><span class=\"line-num\" data-line=\"39\"></span><span class=\"hljs-keyword\">const</span> ReactInput = proxyHoc(Hoc)</li></ol></code></pre>\n<h4>深入JSX</h4>\n<p><code>JSX</code> 仅仅是 <code>React.createElement</code> 的语法糖，当我们写下一段JSX，实际上运行的是什么呢</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span>&lt;MyButton color=<span class=\"hljs-string\">&quot;blue&quot;</span> shadowSize={<span class=\"hljs-number\">2</span>}&gt;</li><li><span class=\"line-num\" data-line=\"2\"></span>  Click Me</li><li><span class=\"line-num\" data-line=\"3\"></span>&lt;/MyButton&gt;</li></ol></code></pre>\n<p>会编译为：</p>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span>React.createElement(</li><li><span class=\"line-num\" data-line=\"2\"></span>  MyButton,</li><li><span class=\"line-num\" data-line=\"3\"></span>  {<span class=\"hljs-attr\">color</span>: <span class=\"hljs-string\">&#x27;blue&#x27;</span>, <span class=\"hljs-attr\">shadowSize</span>: <span class=\"hljs-number\">2</span>},</li><li><span class=\"line-num\" data-line=\"4\"></span>  <span class=\"hljs-string\">&#x27;Click Me&#x27;</span></li><li><span class=\"line-num\" data-line=\"5\"></span>)</li></ol></code></pre>\n<p>因此， 当我们使用JSX时， React必须在作用域内，否则会出错</p>\n<h5>在 JSX 类型中使用点语法</h5>\n<p>在 <code>JSX</code> 中，你也可以使用点语法来引用一个 <code>React</code> 组件。当你在一个模块中导出许多 <code>React</code> 组件时，这会非常方便。例如，如果 <code>MyComponents.DatePicker</code> 是一个组件，你可以在<code> JSX</code> 中直接使用：</p>\n<p><code>&lt;MyComponents.DatePicker/&gt;</code></p>\n<h5>用户自定义组件必须大写开头</h5>\n<p>这是为了不和原生的html 标签冲突</p>\n<h5>动态组件的写法</h5>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;</li><li><span class=\"line-num\" data-line=\"2\"></span><span class=\"hljs-keyword\">import</span> { PhotoStory, VideoStory } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./stories&#x27;</span>;</li><li><span class=\"line-num\" data-line=\"3\"></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-keyword\">const</span> components = {</li><li><span class=\"line-num\" data-line=\"5\"></span>  <span class=\"hljs-attr\">photo</span>: PhotoStory,</li><li><span class=\"line-num\" data-line=\"6\"></span>  <span class=\"hljs-attr\">video</span>: VideoStory</li><li><span class=\"line-num\" data-line=\"7\"></span>};</li><li><span class=\"line-num\" data-line=\"8\"></span></li><li><span class=\"line-num\" data-line=\"9\"></span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Story</span>(<span class=\"hljs-params\">props</span>) </span>{</li><li><span class=\"line-num\" data-line=\"10\"></span>  <span class=\"hljs-comment\">// 正确！JSX 类型可以是大写字母开头的变量。</span></li><li><span class=\"line-num\" data-line=\"11\"></span>  <span class=\"hljs-keyword\">const</span> SpecificStory = components[props.storyType];</li><li><span class=\"line-num\" data-line=\"12\"></span>  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SpecificStory</span> <span class=\"hljs-attr\">story</span>=<span class=\"hljs-string\">{props.story}</span> /&gt;</span></span>;</li><li><span class=\"line-num\" data-line=\"13\"></span>}</li></ol></code></pre>\n<h5>props 默认值为 “True”</h5>\n<pre class=\"hljs\"><code><span class=\"name\"> lang:javascript</span><ol><li><span class=\"line-num\" data-line=\"1\"></span>&lt;MyTextBox autocomplete /&gt;</li><li><span class=\"line-num\" data-line=\"2\"></span></li><li><span class=\"line-num\" data-line=\"3\"></span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MyTextBox</span> <span class=\"hljs-attr\">autocomplete</span>=<span class=\"hljs-string\">{true}</span> /&gt;</span></span></li><li><span class=\"line-num\" data-line=\"4\"></span><span class=\"hljs-comment\">//这两个是等价的</span></li><li><span class=\"line-num\" data-line=\"5\"></span></li></ol></code></pre>\n","author":"timebean"},{"title":"测试","date":"2021/5/29","content":"<h2 style='text-align:center'>测试</h2>\n<span style='text-align:center;color:grey;'>日期：</span><span style='text-align:center;color:grey;'>2021/5/29</span>\t\n<span style='text-align:center;color:grey;'>作者：</span><span style='text-align:center;color:grey;'>timebean</span>\n","author":"timebean"}]